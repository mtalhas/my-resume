// export-docx.js
const fs = require('fs');
const {
    Document,
    Packer,
    Paragraph,
    TextRun,
    HeadingLevel,
    Table,
    TableRow,
    TableCell,
    WidthType
} = require('docx');
const cheerio = require('cheerio');

// A4 dimensions in TWIP (1 inch = 1440 TWIP)
const A4_WIDTH = 11906;    // 210mm
const A4_HEIGHT = 16838;   // 297mm

// Read the HTML file (generated by jsonresume-theme-caffeine)
const html = fs.readFileSync('./resume.html', 'utf-8');
const $ = cheerio.load(html);

/**
 * Helper function converts a cheerio element into a docx TextRun.
 * It inspects the element tag to adjust font, size, and style.
 */
function createTextRun(element, parentStyles = {}) {
    const styles = {
        font: 'Lato',
        size: 24, // 12pt (24 half-points)
        bold: false,
        italics: false,
        color: '39424B'
    };

    if (element.is('h1')) {
        styles.font = 'Josefin Sans';
        styles.bold = true;
        styles.size = 48;
    } else if (element.is('h2')) {
        styles.font = 'Josefin Sans';
        styles.size = 24;
    } else if (element.is('h3')) {
        styles.size = 28;
        styles.bold = element.hasClass('bold');
    } else if (element.is('li')) {
        styles.size = 22; // 11pt
    }

    return new TextRun({
        text: element.text().trim(),
        font: styles.font,
        size: styles.size,
        bold: styles.bold,
        color: styles.color,
        italics: styles.italics
    });
}

/**
 * Build the left column content by parsing the HTML.
 * It creates an array of Paragraph objects.
 */
function buildLeftColumn() {
    const leftContent = [];

    // About Section: find elements in the left column “about-container”
    $('.left-column .about-container').each((i, section) => {
        const $section = $(section);
        $section.find('.info-tag-container').each((j, item) => {
            leftContent.push(new Paragraph({
                children: [createTextRun($(item).find('h6'))],
                spacing: { after: 80 }
            }));
        });
    });

    // Skills sections
    $('.skills-container .container').each((i, section) => {
        const $section = $(section);
        leftContent.push(
            new Paragraph({
                heading: HeadingLevel.HEADING_3,
                children: [createTextRun($section.find('h3'))],
                spacing: { before: 240, after: 120 }
            }),
            new Paragraph({
                children: $section.find('h6').map((i, el) =>
                    createTextRun($(el))
                ).get(),
                spacing: { after: 160 }
            })
        );
    });

    // Languages section
    $('.languages-container').each((i, section) => {
        const $section = $(section);
        leftContent.push(
            new Paragraph({
                heading: HeadingLevel.HEADING_3,
                children: [createTextRun($section.find('h3'))],
                spacing: { before: 240 }
            }),
            ...$section.find('li').map((i, li) =>
                new Paragraph({
                    children: [createTextRun($(li).find('h6'))]
                })
            ).get()
        );
    });

    // Interests section
    $('.interests-container').each((i, section) => {
        const $section = $(section);
        leftContent.push(
            new Paragraph({
                heading: HeadingLevel.HEADING_3,
                children: [createTextRun($section.find('h3'))],
                spacing: { before: 240 }
            }),
            ...$section.find('.item').map((i, item) => {
                const $item = $(item);
                return new Paragraph({
                    children: [
                        ...$item.find('h4').map((i, el) => createTextRun($(el))).get(),
                        ...$item.find('li').map((i, li) => createTextRun($(li))).get()
                    ],
                    bullet: { level: 0 }
                });
            }).get()
        );
    });

    return leftContent;
}

/**
 * Build the right column content by parsing the HTML.
 * It returns an array of Paragraph objects.
 */
function buildRightColumn() {
    const rightContent = [];

    // Summary section
    $('.summary-container').each((i, section) => {
        rightContent.push(
            new Paragraph({
                children: $(section).find('p').map((i, p) =>
                    createTextRun($(p))
                ).get(),
                spacing: { after: 240 }
            })
        );
    });

    // Experience
    $('.work-container .item').each((i, item) => {
        const $item = $(item);
        rightContent.push(
            new Paragraph({
                children: [
                    createTextRun($item.find('h3.bold')),
                    new TextRun({
                        text: '\t',
                        bold: true
                    }),
                    createTextRun($item.find('h5.italic'))
                ],
                spacing: { after: 120 }
            }),
            new Paragraph({
                children: [createTextRun($item.find('h4'))],
                spacing: { after: 120 }
            }),
            ...$item.find('li').map((i, li) =>
                new Paragraph({
                    bullet: { level: 0 },
                    children: [createTextRun($(li))],
                    spacing: { after: 80 }
                })
            ).get()
        );
    });

    // Projects
    $('.projects-container .item').each((i, item) => {
        const $item = $(item);
        rightContent.push(
            new Paragraph({
                children: [
                    createTextRun($item.find('h3.bold')),
                    new TextRun({
                        text: '\t',
                        bold: true
                    }),
                    createTextRun($item.find('h5.italic'))
                ],
                spacing: { before: 240, after: 120 }
            }),
            ...$item.find('li').map((i, li) =>
                new Paragraph({
                    bullet: { level: 0 },
                    children: [createTextRun($(li))],
                    spacing: { after: 80 }
                })
            ).get()
        );
    });

    // Certifications
    $('.certificates-container .item').each((i, item) => {
        const $item = $(item);
        rightContent.push(
            new Paragraph({
                children: [
                    createTextRun($item.find('h3.bold')),
                    new TextRun({
                        text: '\t',
                        bold: true
                    }),
                    createTextRun($item.find('h5.italic'))
                ],
                spacing: { before: 240, after: 120 }
            }),
            new Paragraph({
                children: [createTextRun($item.find('h4'))]
            })
        );
    });

    // Education
    $('.education-container .item').each((i, item) => {
        const $item = $(item);
        rightContent.push(
            new Paragraph({
                children: [
                    createTextRun($item.find('h3.bold')),
                    new TextRun({
                        text: '\t',
                        bold: true
                    }),
                    createTextRun($item.find('h5.italic'))
                ],
                spacing: { before: 240, after: 120 }
            }),
            new Paragraph({
                children: [createTextRun($item.find('h4'))]
            })
        );
    });

    return rightContent;
}

// Build the left and right column arrays from the HTML
const leftContent = buildLeftColumn();
const rightContent = buildRightColumn();

// Create table cells using the new API by providing the content as children at creation time.
const leftCell = new TableCell({
    width: { size: 30, type: WidthType.PERCENTAGE },
    children: leftContent,
});
const rightCell = new TableCell({
    width: { size: 70, type: WidthType.PERCENTAGE },
    children: rightContent,
});

// Create a single row containing the two cells
const tableRow = new TableRow({
    children: [leftCell, rightCell],
});

// Create a table with one row – no need to modify cells after creation
const resumeTable = new Table({
    width: { size: 100, type: WidthType.PERCENTAGE },
    rows: [tableRow],
});

// Create the Document—with metadata and sections provided via the constructor.
// The section contains A4 page properties and the resume table.
const doc = new Document({
    creator: "M. Talha Siddiqui",
    title: "M. Talha Siddiqui Resume",
    description: "DOCX resume generated from HTML output of jsonresume-theme-caffeine",
    sections: [{
        properties: {
            page: {
                size: {
                    width: A4_WIDTH,
                    height: A4_HEIGHT,
                },
                margin: {
                    top: 1440 * 0.25,
                    bottom: 1440 * 0.25,
                    left: 1440 * 0.34,
                    right: 1440 * 0.22,
                }
            }
        },
        children: [resumeTable],
    }],
});

// Generate the DOCX file and write it to disk.
Packer.toBuffer(doc).then((buffer) => {
    fs.writeFileSync('resume.docx', buffer);
});